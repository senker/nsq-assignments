type Person {
  id: Int!,
  name: String!,
  spouse: Person @relationship(type: "SPOUSE", direction: OUT),
  children: [Person!]! @relationship(type: "CHILD", direction: OUT),
  parents: [Person!]! @relationship(type: "CHILD", direction: IN),
  friends: [Person!]! @relationship(type: "FRIEND", direction: OUT),
  acquaintances: [Person!]! @relationship(type: "ACQUAINTANCE", direction: OUT)
}

type Query {
  siblings(id: Int!): [Person!]! 
  @cypher(statement: "MATCH (:Person {id: $id})<-[:CHILD]-()-[:CHILD]->(p) RETURN p")
}

type Mutation {
  createChild(parent1id: Int!, parent2id: Int!, id: Int!, name: String!): Person 
  @cypher(statement: "MATCH (parent1: Person {id: $parent1id}), (parent2: Person {id: $parent2id}) MERGE (parent1)-[:CHILD]->(c:Person {id: $id, name: $name})<-[:CHILD]-(parent2) RETURN c")
}
